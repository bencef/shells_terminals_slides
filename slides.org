#+OPTIONS: num:nil toc:nil ^:nil
#+TITLE: Shells, Terminals and the future that never was
#+AUTHOR: Bence Fabi√°n <bence.fabian@codecool.com>

* Punched Cards
  Punched cards were first used for looms.

  Used in early computers to enter text.
* Punched Cards
  That was one line:

  - Every column a character
  - Every row a bit

  And this is why still to this day lines are 80 columns long.
* Teletypes
  Machines using paper feed.

  Editing was line by line.

  The origin of the name =/dev/tty=.
* Teletypes
  Let's see how editing looked like back then.
* Teletypes
  Oldschool ed only wrote a question mark in this case...

  Let's enter append mode.
* Teletypes
  Now we can enter our program
* Teletypes
  Let's exit append mode.

  With a single dot.

  (good luck if you want to *insert* a single dot on a line)
* Teletypes
  Say we want to refactor =i= into something more meaningful.
* Teletypes
  And now print it.
* Teletypes
  Oh /noooooo/!

  We messed up.

  Let's undo and retry with a better matcher.
* Teletypes
  So easy...

  Let's save and never come back.

  _NOTE_: ed was *much* better than its contemporaries and still has
  some uses today.  For example in shell scripts because it consumes
  commands as a text stream.
* Terminals
  Finally terminals came.

  Still 80 characters but now on 25 lines.

  And the cursor can be moved around.
* Terminals
  This is the present (the 1970s)

  Everything after this is the future.

  The little purple/black windows are emulating these machines.
* Shells
  Let's talk about shells finally
* Shells
  Shells are for
  - Starting programs
  - Interacting with the OS (for example handling files)
* Shells
  Programs can be started with different arguments
* Shells
  Programs can interact with files
* Shells
  We can customize our environment.

  Let's redefine our prompt!
* Shells
  We can even write loops.
* Shells
  The biggest breakthrough came with *pipes*

  Different tools can be combined.
* Shell Example
  Let's count word frequencies in this folder.
* Shell Example
  Gather all text files.
* Shell Example
  Concatenate them and split them into words.

  - tr :: Translate
  - -c :: Complement
  - '\n' :: New line
* Shell Example
  - Collapse unique ones
  - Count them
  - Sort according to numbers
* Shell Example
  Notice how I didn't need to retype the last command.

  Now we are all set and we want to do this next time as well.

  We can look back on what we just did.
* Shell Example
  We can just copy the relevant lines in a file.

  We also need to add an interpreter
  #+BEGIN_EXAMPLE
    #!/bin/sh
  #+END_EXAMPLE

  And make the file runnable.
  #+BEGIN_EXAMPLE
    chmod +x filename
  #+END_EXAMPLE
* The future
  OK, what should I check to see what does the future of the 1980s hold?
** For terminals
   Editable text windows.

   Get an editor that can run a process in its buffers (emacs, acme,
   neovim, etc.)

   Idea, VS code, etc. totally miss the point by emulating terminals.
   (they are still great software, they just miss out on some great
   features)
** For shells
   Check out *dgsh*, the Directed Graph Shell.

   It lets you build pipelines as graphs:

   - branches
   - aggregates

   It is friggin' awesome!
** The bigger picture
   Live System images:

   Persistent homogene systems programmed from the inside.

   - Lisp machines :: Closest you can get nowadays is checking out
                      emacs. (This whole presentation is inside GNU
                      emacs)
   - Smalltalk :: A modern implementation is Pharo.
                  Let's see it.
